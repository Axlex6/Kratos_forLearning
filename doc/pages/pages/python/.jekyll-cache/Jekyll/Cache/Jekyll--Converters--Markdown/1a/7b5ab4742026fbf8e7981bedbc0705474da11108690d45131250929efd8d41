I".%<p>The <code class="language-plaintext highlighter-rouge">ModelPart</code> represents an arbitrary part of the <code class="language-plaintext highlighter-rouge">Model</code> to be simulated and stores the mesh and additional data for it. Most of the <em>Kratos</em> routines take a <code class="language-plaintext highlighter-rouge">ModelPart</code> as their argument. So always is necessary to create and fill a <code class="language-plaintext highlighter-rouge">ModelPart</code>. In this tutorial we will describe how to create and fill a model part from given input file.</p>

<h1 id="setup">Setup</h1>
<p>First of all we need to create a python file with following code to import the <em>Kratos</em>:</p>

<div data-lang="Python" class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">KratosMultiphysics</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">KratosMultiphysics.FluidDynamicsApplication</span> <span class="kn">import</span> <span class="o">*</span>
</code></pre></div></div>

<h1 id="creating-a-modelpart">Creating a ModelPart</h1>
<p>To create a <code class="language-plaintext highlighter-rouge">ModelPart</code>, one has to create a new <code class="language-plaintext highlighter-rouge">Model</code> first, and then to call its constructor passing the <code class="language-plaintext highlighter-rouge">ModelPart</code>`s name as its argument:</p>

<div data-lang="Python" class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">this_model</span> <span class="o">=</span> <span class="n">Model</span><span class="p">()</span>
<span class="n">fluid_model_part</span> <span class="o">=</span> <span class="n">this_model</span><span class="p">.</span><span class="n">CreateModelPart</span><span class="p">(</span><span class="s">"FluidPart"</span><span class="p">)</span>
</code></pre></div></div>

<p>You can print the fluid_model_part:</p>

<div data-lang="Python Output" class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">fluid_model_part</span><span class="p">)</span>
<span class="o">-</span><span class="n">FluidPart</span><span class="o">-</span> <span class="n">model</span> <span class="n">part</span>
    <span class="n">Buffer</span> <span class="n">Size</span> <span class="p">:</span> <span class="mi">1</span>
    <span class="n">Number</span> <span class="n">of</span> <span class="n">tables</span> <span class="p">:</span> <span class="mi">0</span>
    <span class="n">Number</span> <span class="n">of</span> <span class="n">sub</span> <span class="n">model</span> <span class="n">parts</span> <span class="p">:</span> <span class="mi">0</span>
    <span class="n">Current</span> <span class="n">solution</span> <span class="n">step</span> <span class="n">index</span> <span class="p">:</span> <span class="mi">0</span>

    <span class="n">Mesh</span> <span class="mi">0</span> <span class="p">:</span>
        <span class="n">Number</span> <span class="n">of</span> <span class="n">Nodes</span>      <span class="p">:</span> <span class="mi">0</span>
        <span class="n">Number</span> <span class="n">of</span> <span class="n">Properties</span> <span class="p">:</span> <span class="mi">0</span>
        <span class="n">Number</span> <span class="n">of</span> <span class="n">Elements</span>   <span class="p">:</span> <span class="mi">0</span>
        <span class="n">Number</span> <span class="n">of</span> <span class="n">Conditions</span> <span class="p">:</span> <span class="mi">0</span>
</code></pre></div></div>

<p>It can be seen that the <code class="language-plaintext highlighter-rouge">ModelPart</code> is empty and has the buffer size equal to 1. This means that no history of the nodal solution steps variables will be saved.</p>

<p>The next step is to define the variables we want to store as historical variables in nodes of this <code class="language-plaintext highlighter-rouge">ModelPart</code> as follow:</p>

<div data-lang="Python" class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fluid_model_part</span><span class="p">.</span><span class="n">AddNodalSolutionStepVariable</span><span class="p">(</span><span class="n">VELOCITY</span><span class="p">)</span>
<span class="n">fluid_model_part</span><span class="p">.</span><span class="n">AddNodalSolutionStepVariable</span><span class="p">(</span><span class="n">PRESSURE</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="reading-modelpart-file">Reading ModelPart File</h1>
<p>The input file of the <em>Kratos</em> has <code class="language-plaintext highlighter-rouge">.mdpa</code> (stand for ModelPart) and contains the properties, nodes, elements, conditions and initial values. A convenient way to create this file is to use the interface prepared for <em>GiD</em> pre and post processor. <a href="https://github.com/KratosMultiphysics/Kratos/wiki/Input-data">Here</a> you can find more information about the input file. Here we assume that the <code class="language-plaintext highlighter-rouge">Cylinder.mdpa</code> input file is already created using <em>GiD</em>:</p>

<p>For reading the <code class="language-plaintext highlighter-rouge">.mdpa</code> file first we have to create a <code class="language-plaintext highlighter-rouge">ModelPartIO</code> object passing the input file path/name to its constructor:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fluid_model_part_io</span> <span class="o">=</span> <span class="n">ModelPartIO</span><span class="p">(</span><span class="s">"path/to/file/example"</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>NOTE:</strong> the file name is used without the <code class="language-plaintext highlighter-rouge">.mdpa</code> extension!</p>

<p>Then use this <em>IO</em> object to read the file and store the mesh and data in <code class="language-plaintext highlighter-rouge">ModelPart</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fluid_model_part_io</span><span class="p">.</span><span class="n">ReadModelPart</span><span class="p">(</span><span class="n">fluid_model_part</span><span class="p">)</span>
</code></pre></div></div>

<p>And printing again the <code class="language-plaintext highlighter-rouge">ModelPart</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &gt;&gt;&gt; print(fluid_model_part)
 StructurePart model part
-FluidPart- model part
    Buffer Size : 1
    Number of tables : 0
    Number of sub model parts : 5
    Current solution step index : 0

    Mesh 0 :
        Number of Nodes      : 3072
        Number of Properties : 2
        Number of Elements   : 5778
        Number of Conditions : 366

    -NoSlip2D_No_Slip_Cylinder- model part
        Number of tables : 0
        Number of sub model parts : 0

        Mesh 0 :
            Number of Nodes      : 126
            Number of Properties : 0
            Number of Elements   : 0
            Number of Conditions : 126
    -Parts_Fluid- model part
        Number of tables : 0
        Number of sub model parts : 0

        Mesh 0 :
            Number of Nodes      : 3072
            Number of Properties : 0
            Number of Elements   : 5778
            Number of Conditions : 0
    -AutomaticInlet2D_Inlet- model part
        Number of tables : 0
        Number of sub model parts : 0

        Mesh 0 :
            Number of Nodes      : 21
            Number of Properties : 0
            Number of Elements   : 0
            Number of Conditions : 20
    -Outlet2D_Outlet- model part
        Number of tables : 0
        Number of sub model parts : 0

        Mesh 0 :
            Number of Nodes      : 21
            Number of Properties : 0
            Number of Elements   : 0
            Number of Conditions : 20
    -NoSlip2D_No_Slip_Walls- model part
        Number of tables : 0
        Number of sub model parts : 0

        Mesh 0 :
            Number of Nodes      : 202
            Number of Properties : 0
            Number of Elements   : 0
            Number of Conditions : 200
</code></pre></div></div>

<h1 id="setting-the-buffer-size">Setting the Buffer Size</h1>
<p>If we need to store the values of the nodal solution step variables in previous time steps, we must modify the buffer size <strong>AFTER</strong> defining the historical variables:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fluid_model_part</span><span class="p">.</span><span class="n">SetBufferSize</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>This would store the values for two previous steps in addition to the current ones.</p>

<p><strong>Next</strong> <a href="https://github.com/KratosMultiphysics/Kratos/wiki/Python-Script-Tutorial:-Writing-Output-File">Writing Output File</a><br />
<strong>Prev</strong> <a href="https://github.com/KratosMultiphysics/Kratos/wiki/Python-Script-Tutorial:-Reading-ProjectParameters">Reading ProjectParameters</a></p>
:ET