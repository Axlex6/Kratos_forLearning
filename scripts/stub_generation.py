import sys
from pathlib import Path
from importlib import import_module

try:
    from mypy.stubgen import parse_options, generate_stubs
except ImportError:
    print("Please install mypy using  \"pip install mypy\" to generate pyi stub files for libraries generated by pybind11.")
    exit(0)

def __generate_stub_files_for_module(cpp_lib_dir: str, cpp_lib_name: str) -> None:
    args = ["-o", cpp_lib_dir, "-p", cpp_lib_name]
    options = parse_options(args)
    generate_stubs(options)

def main():
    kratos_installation_path = Path(sys.argv[1])
    cpp_lib_dir = str((kratos_installation_path / "libs").absolute())
    sys.path.insert(0, str(kratos_installation_path.absolute()))
    sys.path.insert(0, cpp_lib_dir)

    # generate Kratos core cpp stubs files
    list_of_cpp_libs = ["Kratos"]
    __generate_stub_files_for_module(cpp_lib_dir, "Kratos")

    from KratosMultiphysics.kratos_utilities import GetListOfAvailableApplications
    list_of_available_applications = GetListOfAvailableApplications()
    for application_name in list_of_available_applications:
        import_module("KratosMultiphysics." + application_name)
        application_lib_name = "Kratos" + application_name
        list_of_cpp_libs.append(application_lib_name)
        __generate_stub_files_for_module(cpp_lib_dir, application_lib_name)

    # now iterate through auxiliary libraries and generate stub files
    for lib_path in Path(cpp_lib_dir).iterdir():
        if lib_path.is_file():
            lib_name = str(lib_path.relative_to(lib_path.parent))
            cpython_location = lib_name.find(".cpython")
            if cpython_location != -1:
                lib_name = lib_name[:cpython_location]
                if lib_name not in list_of_cpp_libs:
                    __generate_stub_files_for_module(cpp_lib_dir, lib_name)

if __name__ == "__main__":
    main()








