//    |  /           |
//    ' /   __| _` | __|  _ \   __|
//    . \  |   (   | |   (   |\__ \.
//   _|\_\_|  \__,_|\__|\___/ ____/
//                   Multi-Physics ThermalDEM Application
//
//  License:         BSD License
//                   Kratos default license: kratos/license.txt
//
//  Main authors:    Rafael Rangel (rrangel@cimne.upc.edu)
//

// Project includes
#include "thermal_dem_application_variables.h"

namespace Kratos
{
// Variables
KRATOS_CREATE_VARIABLE(std::string, DIRECT_CONDUCTION_MODEL)
KRATOS_CREATE_VARIABLE(std::string, INDIRECT_CONDUCTION_MODEL)
KRATOS_CREATE_VARIABLE(std::string, CONVECTION_MODEL)
KRATOS_CREATE_VARIABLE(std::string, RADIATION_MODEL)
KRATOS_CREATE_VARIABLE(std::string, ADJUSTED_CONTACT_MODEL)
KRATOS_CREATE_VARIABLE(std::string, VORONOI_METHOD)
KRATOS_CREATE_VARIABLE(std::string, POSORITY_METHOD)
KRATOS_CREATE_VARIABLE(bool,        MOTION_OPTION)
KRATOS_CREATE_VARIABLE(bool,        DIRECT_CONDUCTION_OPTION)
KRATOS_CREATE_VARIABLE(bool,        INDIRECT_CONDUCTION_OPTION)
KRATOS_CREATE_VARIABLE(bool,        CONVECTION_OPTION)
KRATOS_CREATE_VARIABLE(bool,        RADIATION_OPTION)
KRATOS_CREATE_VARIABLE(bool,        FRICTION_HEAT_OPTION)
KRATOS_CREATE_VARIABLE(bool,        ADJUSTED_CONTACT_OPTION)
KRATOS_CREATE_VARIABLE(bool,        TEMPERATURE_DEPENDENT_RADIUS_OPTION)
KRATOS_CREATE_VARIABLE(bool,        FIXED_TEMPERATURE)
KRATOS_CREATE_VARIABLE(bool,        ADIABATIC)
KRATOS_CREATE_VARIABLE(int,         THERMAL_FREQUENCY)
KRATOS_CREATE_VARIABLE(double,      THERMAL_CONDUCTIVITY)
KRATOS_CREATE_VARIABLE(double,      REAL_YOUNG_MODULUS_RATIO)
KRATOS_CREATE_VARIABLE(double,      HEATFLUX)
KRATOS_CREATE_VARIABLE(double,      HEATSOURCE)
KRATOS_CREATE_VARIABLE(double,      MIN_CONDUCTION_DISTANCE)
KRATOS_CREATE_VARIABLE(double,      MAX_CONDUCTION_DISTANCE)
KRATOS_CREATE_VARIABLE(double,      ISOTHERMAL_CORE_RADIUS)
KRATOS_CREATE_VARIABLE(double,      MAX_RADIATION_DISTANCE)
KRATOS_CREATE_VARIABLE(double,      FRICTION_HEAT_CONVERSION)
KRATOS_CREATE_VARIABLE(double,      AVERAGE_POROSITY)
KRATOS_CREATE_VARIABLE(double,      ALPHA_SHAPE_PARAMETER)
KRATOS_CREATE_VARIABLE(double,      INTEGRAL_TOLERANCE)
KRATOS_CREATE_VARIABLE(double,      FLUID_LAYER_THICKNESS)
KRATOS_CREATE_VARIABLE(double,      FLUID_DENSITY)
KRATOS_CREATE_VARIABLE(double,      FLUID_VISCOSITY)
KRATOS_CREATE_VARIABLE(double,      FLUID_THERMAL_CONDUCTIVITY)
KRATOS_CREATE_VARIABLE(double,      FLUID_HEAT_CAPACITY)
KRATOS_CREATE_VARIABLE(double,      FLUID_TEMPERATURE)
KRATOS_CREATE_VARIABLE(Vector,      FLUID_VELOCITY)

// Flags
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, IS_ADIABATIC,                     0);
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, HAS_MOTION,                       1);
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, HAS_FIXED_TEMPERATURE,            2);
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, HAS_DIRECT_CONDUCTION,            3);
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, HAS_INDIRECT_CONDUCTION,          4);
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, HAS_CONVECTION,                   5);
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, HAS_RADIATION,                    6);
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, HAS_FRICTION_HEAT,                7);
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, HAS_ADJUSTED_CONTACT,             8);
KRATOS_CREATE_LOCAL_FLAG(DEMThermalFlags, HAS_TEMPERATURE_DEPENDENT_RADIUS, 9);
}
